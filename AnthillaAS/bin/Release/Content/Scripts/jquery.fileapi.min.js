/*! jquery.fileapi 0.3.4 - MIT | git://github.com/rubaxa/jquery.fileapi.git */
(function (e, t) { "use strict"; function i(e) { var t; for (t in e) if (e.hasOwnProperty(t) && !(e[t] instanceof Object || "overlay" === t)) return !0; return !1 } function s(e, t, i, s) { if (i) { var n = i - s, o = /max/.test(t); (o && 0 > n || !o && n > 0) && (e.errors || (e.errors = {}), e.errors[t] = Math.abs(n)) } } function n(e, t, i, n) { if (e) { var o = i.length - (e - t); o > 0 && u(i.splice(0, o), function (e, t) { s(e, "maxFiles", -1, t), n.push(e) }) } } var o = e.noop, r = !e.fn.prop, l = r ? "attr" : "prop", a = "data-fileapi", h = "data-fileapi-id", p = [].slice, u = t.each, f = t.extend, c = function (e, t) { var i = p.call(arguments, 2); return t.bind ? t.bind.apply(t, [e].concat(i)) : function () { return t.apply(e, i.concat(p.call(arguments))) } }, d = function (e) { return "[" + a + '="' + e + '"]' }, m = function (e) { return 0 === e.indexOf("#") }, g = function (t, i) { if (this.$el = t = e(t).on("change.fileapi", 'input[type="file"]', c(this, this._onSelect)), this.el = t[0], this._options = {}, this.options = { url: 0, data: {}, accept: 0, multiple: !1, paramName: 0, dataType: "json", duplicate: !1, chunkSize: 0, chunkUploadRetry: 3, maxSize: 0, maxFiles: 0, imageSize: 0, sortFn: 0, filterFn: 0, autoUpload: !1, clearOnSelect: void 0, clearOnComplete: void 0, lang: { B: "bytes", KB: "KB", MB: "MB", GB: "GB", TB: "TB" }, sizeFormat: "0.00", imageTransform: 0, imageAutoOrientation: !!FileAPI.support.exif, elements: { ctrl: { upload: d("ctrl.upload"), reset: d("ctrl.reset"), abort: d("ctrl.abort") }, empty: { show: d("empty.show"), hide: d("empty.hide") }, emptyQueue: { show: d("emptyQueue.show"), hide: d("emptyQueue.hide") }, active: { show: d("active.show"), hide: d("active.hide") }, size: d("size"), name: d("name"), progress: d("progress"), list: d("list"), file: { tpl: d("file.tpl"), progress: d("file.progress"), active: { show: d("file.active.show"), hide: d("file.active.hide") }, preview: { el: 0, get: 0, width: 0, height: 0, processing: 0 }, abort: d("file.abort"), remove: d("file.remove"), rotate: d("file.rotate") }, dnd: { el: d("dnd"), hover: "dnd_hover", fallback: d("dnd.fallback") } }, onDrop: o, onDropHover: o, onSelect: o, onUpload: o, onProgress: o, onComplete: o, onFilePrepare: o, onFileUpload: o, onFileProgress: o, onFileComplete: o, onFileRemove: null, onFileRemoveCompleted: null }, e.extend(!0, this.options, i), i = this.options, this.option("elements.file.preview.rotate", i.imageAutoOrientation), !i.url) { var s = this.$el.attr("action") || this.$el.find("form").attr("action"); s ? i.url = s : this._throw("url â€” is not defined") } this.$files = this.$elem("list"), this.itemTplFn = e.fn.fileapi.tpl(e("<div/>").append(this.$elem("file.tpl")).html()), u(i, function (e, t) { this._setOption(t, e) }, this), this.$el.on("reset.fileapi", c(this, this._onReset)).on("submit.fileapi", c(this, this._onSubmit)).on("upload.fileapi progress.fileapi complete.fileapi", c(this, this._onUploadEvent)).on("fileupload.fileapi fileprogress.fileapi filecomplete.fileapi", c(this, this._onFileUploadEvent)).on("click", "[" + a + "]", c(this, this._onActionClick)); var n = i.elements.ctrl; n && (this._listen("click", n.reset, c(this, this._onReset)), this._listen("click", n.upload, c(this, this._onSubmit)), this._listen("click", n.abort, c(this, this._onAbort))); var r = FileAPI.support.dnd; this.$elem("dnd.el", !0).toggle(r), this.$elem("dnd.fallback").toggle(!r), r && this.$elem("dnd.el", !0).dnd(c(this, this._onDropHover), c(this, this._onDrop)), this.$progress = this.$elem("progress"), void 0 === i.clearOnSelect && (i.clearOnSelect = !i.multiple), this.clear() }; g.prototype = { constructor: g, _throw: function (e) { throw "jquery.fileapi: " + e }, _getFiles: function (e, i) { var o = this.options, r = o.maxSize, l = o.maxFiles, a = o.filterFn, h = this.files.length, p = t.getFiles(e), f = { all: p, files: [], other: [], duplicate: o.duplicate ? [] : this._extractDuplicateFiles(p) }, c = o.imageSize, d = this; c || a ? t.filterFiles(p, function (e, t) { return t && c && (s(e, "minWidth", c.minWidth, t.width), s(e, "minHeight", c.minHeight, t.height), s(e, "maxWidth", c.maxWidth, t.width), s(e, "maxHeight", c.maxHeight, t.height)), s(e, "maxSize", r, e.size), !e.errors && (!a || a(e, t)) }, function (e, t) { n(l, h, e, t), f.other = t, f.files = e, i.call(d, f) }) : (u(p, function (e) { s(e, "maxSize", r, e.size), f[e.errors ? "other" : "files"].push(e) }), n(l, h, f.files, f.other), i.call(d, f)) }, _extractDuplicateFiles: function (e) { for (var t, i = [], s = e.length, n = this.files; s--;) for (t = n.length; t--;) if (this._fileCompare(e[s], n[t])) { i.push(e.splice(s, 1)); break } return i }, _fileCompare: function (e, t) { return e.size == t.size && e.name == t.name }, _getFormatedSize: function (e) { var i = this.options, s = "B"; return e >= t.TB ? e /= t[s = "TB"] : e >= t.GB ? e /= t[s = "GB"] : e >= t.MB ? e /= t[s = "MB"] : e >= t.KB && (e /= t[s = "KB"]), i.sizeFormat.replace(/^\d+([^\d]+)(\d*)/, function (t, n, o) { return e = e.toFixed(o.length), (e + "").replace(".", n) + " " + i.lang[s] }) }, _onSelect: function (e) { this.options.clearOnSelect && (this.queue = [], this.files = []), this._getFiles(e, c(this, function (t) { t.all.length && this.emit("select", t) !== !1 && this.add(t.files), FileAPI.reset(e.target) })) }, _onActionClick: function (t) { var i = t.currentTarget, s = e.attr(i, a), n = e(i).closest("[" + h + "]", this.$el).attr(h), o = this._getFile(n), r = !0; "file.remove" == s ? o && this.emit("fileRemove" + (o.complete ? "Completed" : ""), o) && this.remove(n) : /^file\.rotate/.test(s) ? this.rotate(n, /ccw/.test(s) ? "-=90" : "+=90") : r = !1, r && t.preventDefault() }, _listen: function (t, i, s) { i && u(e.trim(i).split(","), function (i) { i = e.trim(i), m(i) ? e(i).on(t + ".fileapi", s) : this.$el.on(t + ".fileapi", i, s) }, this) }, _onSubmit: function (e) { e.preventDefault(), this.upload() }, _onReset: function (e) { e.preventDefault(), this.clear() }, _onAbort: function (e) { e.preventDefault(), this.abort() }, _onDrop: function (e) { this._getFiles(e, function (e) { this.emit("drop", e) !== !1 && this.add(e.files) }) }, _onDropHover: function (t, i) { if (this.emit("dropHover", { state: t, event: i }) !== !1) { var s = this.option("elements.dnd.hover"); s && e(i.currentTarget).toggleClass(s, t) } }, _getFile: function (e) { return t.filter(this.files, function (i) { return t.uid(i) == e })[0] }, _getUploadEvent: function (e, t) { var i = { xhr: e, file: this.xhr.currentFile, files: this.xhr.files, widget: this }; return f(i, t) }, _emitUploadEvent: function (e, t, i) { var s = this._getUploadEvent(i); this.emit(e + "Upload", s) }, _emitProgressEvent: function (e, t, i, s) { var n = this._getUploadEvent(s, t); this.emit(e + "Progress", n) }, _emitCompleteEvent: function (t, i, s, n) { var o = this._getUploadEvent(s, { error: i, status: s.status, statusText: s.statusText, result: s.responseText }); if ("file" == t && (n.complete = !0), !i && "json" == this.options.dataType) try { o.result = e.parseJSON(o.result) } catch (i) { o.error = i } this.emit(t + "Complete", o) }, _onUploadEvent: function (e, t) { var i = this, s = i.$progress, n = e.type; if ("progress" == n) s.stop().animate({ width: 100 * (t.loaded / t.total) + "%" }, 300); else if ("upload" == n) s.width(0); else { var o = function () { s.dequeue(), i[i.options.clearOnComplete ? "clear" : "dequeue"]() }; this.xhr = null, this.active = !1, s.length ? s.queue(o) : o() } }, _onFileUploadPrepare: function (s, n) { var o = t.uid(s), r = this._rotate[o], l = this._crop[o], a = this._resize[o], h = this._getUploadEvent(this.xhr); if (r || l) { var p = n.imageTransform = n.imageTransform || {}; r = r || (this.options.imageAutoOrientation ? "auto" : void 0), e.isEmptyObject(p) || i(p) ? (f(p, a), p.crop = l, p.rotate = r) : u(p, function (e) { f(e, a), e.crop = l, e.rotate = r }) } h.file = s, h.options = n, this.emit("filePrepare", h) }, _onFileUploadEvent: function (e, i) { var s = this, n = e.type.substr(4), o = t.uid(i.file), r = this.$file(o), l = this._$fileprogress, a = this.options; if (this.__fileId !== o && (this.__fileId = o, this._$fileprogress = l = this.$elem("file.progress", r)), console.log(o, i, r), "progress" == n) l.stop().animate({ width: 100 * (i.loaded / i.total) + "%" }, 300); else if ("upload" == n || "complete" == n) { var h = function () { var e = "file." + n, t = s.$elem("file.remove", r); "upload" == n ? (t.hide(), l.width(0)) : a.onRemoveCompleted && t.show(), l.dequeue(), s.$elem(e + ".show", r).show(), s.$elem(e + ".hide", r).hide() }; l.length ? l.queue(h) : h(), "complete" == n && (this.uploaded.push(i.file), delete this._rotate[o]) } }, _redraw: function (i) { var s = this.files, n = !!this.active, o = !s.length && !n, r = !this.queue.length && !n, a = [], p = 0, f = this.$files, c = f.children().length, d = this.option("elements.file.preview"); i && this.$files.empty(), u(s, function (i, s) { var n = t.uid(i); if (a.push(i.name), p += i.size, f.length && !this.$file(n).length) { var o = this.itemTplFn({ $idx: c + s, uid: n, name: i.name, type: i.type, size: i.size, sizeText: this._getFormatedSize(i.size) }); f.append(e(o).attr(h, n)), d.el && this._makeFilePreview(n, i, d) } }, this), this.$elem("name").text(a.join(", ")), this.$elem("size").text(r ? "" : this._getFormatedSize(p)), this.$elem("empty.show").toggle(o), this.$elem("empty.hide").toggle(!o), this.$elem("emptyQueue.show").toggle(r), this.$elem("emptyQueue.hide").toggle(!r), this.$elem("active.show").toggle(n), this.$elem("active.hide").toggle(!n), this.$(".js-fileapi-wrapper,:file")[n ? "attr" : "removeAttr"]("aria-disabled", n)[l]("disabled", n), this._disableElem("ctrl.upload", r || n), this._disableElem("ctrl.reset", r || n), this._disableElem("ctrl.abort", !n) }, _disableElem: function (e, t) { this.$elem(e)[t ? "attr" : "removeAttr"]("aria-disabled", "disabled")[l]("disabled", t) }, _makeFilePreview: function (e, i, s, n) { var o = this, r = n ? o.$(s.el) : o.$file(e).find(s.el); if (!o._crop[e]) if (/^image/.test(i.type)) { var l = t.Image(i), a = function () { l.get(function (t, n) { o._crop[e] || (t ? (s.get && s.get(r, i), o.emit("previewError", [t, i])) : r.html(n)) }) }; s.width && l.preview(s.width, s.height), s.rotate && l.rotate("auto"), s.processing ? s.processing(i, l, a) : a() } else s.get && s.get(r, i) }, emit: function (t, i) { var s, n = this.options, o = e.Event(t.toLowerCase()); return o.widget = this, t = e.camelCase("on-" + t), e.isFunction(n[t]) && (s = n[t].call(this.el, o, i)), this.$el.triggerHandler(o, i), s !== !1 && !o.isDefaultPrevented() }, add: function (e, i) { if (e = [].concat(e), e.length) { var s = this.options, n = s.sortFn, o = s.elements.preview; n && e.sort(n), o && o.el && u(e, function (e) { this._makeFilePreview(t.uid(e), e, o, !0) }, this), this.xhr && this.xhr.append(e), this.queue = i ? e : this.queue.concat(e), this.files = i ? e : this.files.concat(e), this.active ? (this.xhr.append(e), this._redraw(i)) : (this._redraw(i), this.options.autoUpload && this.upload()) } }, $: function (t, i) { return "string" == typeof t && (t = /^#/.test(t) ? t : (i ? e(i) : this.$el).find(t)), e(t) }, $elem: function (t, i, s) { i && i.jquery && (s = i, i = !1); var n = this.option("elements." + t); return void 0 === n && i && (n = this.option("elements." + t.substr(0, t.lastIndexOf(".")))), this.$("string" != e.type(n) && e.isEmptyObject(n) ? [] : n, s) }, $file: function (e) { return this.$("[" + h + '="' + e + '"]') }, option: function (t, i) { if (void 0 !== i && e.isPlainObject(i)) return u(i, function (e, i) { this.option(t + "." + i, e) }, this), this; var s, n, o = this.options, r = o[t], l = 0; if (-1 != t.indexOf(".")) for (r = o, t = t.split("."), s = t.length; s > l; l++) { if (n = t[l], void 0 !== i && 1 === s - l) { r[n] = i; break } r[n] || (r[n] = {}), r = r[n] } else void 0 !== i && (o[t] = i); return void 0 !== i && (this._setOption(t, i, this._options[t]), this._options[t] = i), void 0 !== i ? i : r }, _setOption: function (e, t) { switch (e) { case "accept": case "multiple": case "paramName": "paramName" == e && (e = "name"), t && this.$(":file")[l](e, t) } }, serialize: function () { var t, i = {}; return this.$el.find(":input").each(function (s, n) { (s = n.name) && !n.disabled && (n.checked || /select|textarea|input/i.test(n.nodeName) && !/checkbox|radio|file/i.test(n.type)) && (t = e(n).val(), void 0 !== i[s] ? (i[s].push || (i[s] = [i[s]]), i[s].push(t)) : i[s] = t) }), i }, upload: function () { if (!this.active) { this.active = !0; var e = this.$el, i = this.options, s = {}, n = { url: i.url, data: f({}, this.serialize(), i.data), headers: i.headers, files: s, chunkSize: 0 | i.chunkSize, chunkUploadRetry: 0 | i.chunkUploadRetry, prepare: c(this, this._onFileUploadPrepare), imageTransform: i.imageTransform }; s[e.find(":file").attr("name") || "files[]"] = this.queue, u(["Upload", "Progress", "Complete"], function (e) { var t = e.toLowerCase(); n[t] = c(this, this["_emit" + e + "Event"], ""), n["file" + t] = c(this, this["_emit" + e + "Event"], "file") }, this), this.xhr = t.upload(n), this._redraw() } }, abort: function (e) { this.active && this.xhr && this.xhr.abort(e) }, crop: function (i, s) { var n = t.uid(i), o = this.options, r = o.multiple ? this.option("elements.file.preview") : o.elements.preview, l = (o.multiple ? this.$file(n) : this.$el).find(r && r.el); l.length && t.getInfo(i, c(this, function (n, a) { if (n) this.emit("previewError", [n, i]); else { l.find("div>div").length || l.html(e("<div><div></div></div>").css(r).css("overflow", "hidden")), this.__cropFile !== i && (this.__cropFile = i, t.Image(i).rotate(o.imageAutoOrientation ? "auto" : 0).get(function (t, i) { l.find(">div>div").html(e(i).width("100%").height("100%")) }, "exactFit")); var h = r.width, p = r.height, u = h, f = p, c = h / s.rw, d = p / s.rh; r.keepAspectRatio && (c > 1 && d > 1 ? (c = d = 1, f = s.h, u = s.w) : d > c ? (d = c, f = h * s.rh / s.rw) : (c = d, u = p * s.rw / s.rh)), l.find(">div>div").css({ width: Math.round(c * a[s.flip ? "height" : "width"]), height: Math.round(d * a[s.flip ? "width" : "height"]), marginLeft: -Math.round(c * s.rx), marginTop: -Math.round(d * s.ry) }), r.keepAspectRatio && l.find(">div").css({ width: Math.round(u), height: Math.round(f), marginLeft: h > u ? Math.round((h - u) / 2) : 0, marginTop: p > f ? Math.round((p - f) / 2) : 0 }) } })), this._crop[n] = s }, resize: function (e, i, s, n) { this._resize[t.uid(e)] = { type: n, width: i, height: s } }, rotate: function (e, i) { var s = "object" == typeof e ? t.uid(e) : e, n = this.options, o = n.multiple ? this.option("elements.file.preview") : n.elements.preview, r = (n.multiple ? this.$file(s) : this.$el).find(o && o.el), l = this._rotate; /([+-])=/.test(i) ? i = l[s] = (l[s] || 0) + ("+" == RegExp.$1 ? 1 : -1) * i.substr(2) : l[s] = i, r.css({ "-webkit-transform": "rotate(" + i + "deg)", "-moz-transform": "rotate(" + i + "deg)", transform: "rotate(" + i + "deg)" }) }, remove: function (e) { var i = "object" == typeof e ? t.uid(e) : e; this.$file(i).remove(), this.queue = t.filter(this.queue, function (e) { return t.uid(e) != i }), this.files = t.filter(this.files, function (e) { return t.uid(e) != i }), this._redraw() }, clear: function () { this._crop = {}, this._resize = {}, this._rotate = {}, this.queue = [], this.files = [], this.uploaded = [], this.$files.empty(), this._redraw() }, dequeue: function () { this.queue = [], this._redraw() }, widget: function () { return this }, toString: function () { return "[jQuery.FileAPI object]" }, destroy: function () { this.$el.off(".fileapi").removeData("fileapi"), u(this.options.elements.ctrl, function (t) { m(t) && e(t).off("click.fileapi") }) } }, e.fn.fileapi = function (t, i) { var s = this.data("fileapi"); if (s) { if ("widget" === t) return s; if ("string" == typeof t) { var n, o = s[t]; return e.isFunction(o) ? n = o.apply(s, p.call(arguments, 1)) : void 0 === o && (n = s.option(t, i)), void 0 === n ? this : n } } else (null == t || "object" == typeof t) && this.data("fileapi", new g(this, t)); return this }, e.fn.fileapi.version = "0.3.4", e.fn.fileapi.tpl = function (e) { var t = 0, i = "__b+='"; return e.replace(/(?:&lt;|<)%([-=])?([\s\S]+?)%(?:&gt;|>)|$/g, function (s, n, o, r) { return i += e.slice(t, r).replace(/[\r\n"']/g, function (e) { return "\\" + e }), o && (i += n ? "'+\n((__x=(" + o + "))==null?'':" + ("-" == n ? "__esc(__x)" : "__x") + ")\n+'" : "';\n" + o + "\n__b+='"), t = r + s.length, s }), Function("ctx", "var __x,__b='',__esc=function(val){return typeof val=='string'?val.replace(/</g,'&lt;').replace(/\"/g,'&quot;'):val;};with(ctx||{}){\n" + i + "';\n}return __b;") }, e.fn.webcam = function (i) { var s = this, n = s, r = e(s), l = "fileapi-camera", a = r.data(l); return a === !0 ? (t.log("[webcam.warn] not ready."), n = null) : "widget" === i ? n = a : "destroy" === i ? (a.stop(), r.empty()) : a ? n = a[i]() : a === !1 ? (t.log("[webcam.error] does not work."), n = null) : (r.data(l, !0), i = f({ success: o, error: o }, i), FileAPI.Camera.publish(r, i, function (e, t) { r.data(l, e ? !1 : t), i[e ? "error" : "success"].call(s, e || t) })), n }, e.fn.cropper = function (i) { var s = this, n = i.file; if ("string" == typeof i) s.first().Jcrop.apply(s, arguments); else { var o = i.minSize || [0, 0], r = i.aspectRatio || o[0] / o[1]; e.isArray(i.minSize) && void 0 === i.aspectRatio && r > 0 && (i.aspectRatio = r), t.getInfo(n, function (l, a) { var h = t.Image(n), p = i.maxSize; p && h.resize(Math.max(p[0], o[0]), Math.max(p[1], o[1]), "max"), h.rotate("auto").get(function (t, n) { var o = i.selection, l = Math.min(n.width, n.height), h = l, p = l / r, f = FileAPI.Image.exifOrientation[a.exif && a.exif.Orientation] || 0; if (o) { (/%/.test(o) || o > 0 && 1 > o) && (o = parseFloat(o, 10) / (o > 0 ? 1 : 100), h *= o, p *= o); var c = (n.width - h) / 2, d = (n.height - p) / 2; i.setSelect = [0 | c, 0 | d, 0 | c + h, 0 | d + p] } u(["onSelect", "onChange"], function (e, t) { (t = i[e]) && (i[e] = function (e) { var i = f % 180, s = a.width, o = a.height, r = e.x / n.width, l = e.y / n.height, h = e.w / n.width, p = e.h / n.height, u = s * (i ? l : r), c = o * (i ? 1 - (e.x + e.w) / n.width : l), d = s * (i ? p : h), m = o * (i ? h : p); t({ x: u, y: c, w: d, h: m, rx: r * (i ? o : s), ry: l * (i ? s : o), rw: h * (i ? o : s), rh: p * (i ? s : o), lx: e.x, ly: e.y, lw: e.w, lh: e.h, lx2: e.x2, ly2: e.y2, deg: f, flip: i }) }) }); var m = e("<div/>").css("lineHeight", 0).append(e(n).css("margin", 0)); s.html(m), m.Jcrop(i).trigger("resize") }) }) } return s } })(jQuery, FileAPI);